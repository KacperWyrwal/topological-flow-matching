hydra:
  run:
    dir: outputs/${now:%Y-%m-%d}/${now:%H-%M-%S}
  sweep:
    dir: multirun/${now:%Y-%m-%d}/${now:%H-%M-%S}
    subdir: ${hydra.job.num}
  launcher:
    _target_: hydra._internal.core_plugins.basic_launcher.BasicLauncher
  sweeper:
    _target_: hydra._internal.core_plugins.basic_sweeper.BasicSweeper
    max_batch_size: null
    params:
      run.seed: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9
  help:
    app_name: ${hydra.job.name}
    header: '${hydra.help.app_name} is powered by Hydra.

      '
    footer: 'Powered by Hydra (https://hydra.cc)

      Use --hydra-help to view Hydra specific help

      '
    template: '${hydra.help.header}

      == Configuration groups ==

      Compose your configuration from those groups (group=option)


      $APP_CONFIG_GROUPS


      == Config ==

      Override anything in the config (foo.bar=value)


      $CONFIG


      ${hydra.help.footer}

      '
  hydra_help:
    template: 'Hydra (${hydra.runtime.version})

      See https://hydra.cc for more info.


      == Flags ==

      $FLAGS_HELP


      == Configuration groups ==

      Compose your configuration from those groups (For example, append hydra/job_logging=disabled
      to command line)


      $HYDRA_CONFIG_GROUPS


      Use ''--cfg hydra'' to Show the Hydra config.

      '
    hydra_help: ???
  hydra_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][HYDRA] %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
    root:
      level: INFO
      handlers:
      - console
    loggers:
      logging_example:
        level: DEBUG
    disable_existing_loggers: false
  job_logging:
    version: 1
    formatters:
      simple:
        format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'
    handlers:
      console:
        class: logging.StreamHandler
        formatter: simple
        stream: ext://sys.stdout
      file:
        class: logging.FileHandler
        formatter: simple
        filename: ${hydra.runtime.output_dir}/${hydra.job.name}.log
    root:
      level: INFO
      handlers:
      - console
      - file
    disable_existing_loggers: false
  env: {}
  mode: MULTIRUN
  searchpath: []
  callbacks: {}
  output_subdir: .hydra
  overrides:
    hydra:
    - hydra.mode=MULTIRUN
    task:
    - experiments=brain/topo_resnet_test
    - train.num_epochs=1
    - run.device=cpu
  job:
    name: run
    chdir: true
    override_dirname: experiments=brain/topo_resnet_test,run.device=cpu,train.num_epochs=1
    id: ???
    num: ???
    config_name: config
    env_set: {}
    env_copy: []
    config:
      override_dirname:
        kv_sep: '='
        item_sep: ','
        exclude_keys: []
  runtime:
    version: 1.3.2
    version_base: '1.3'
    cwd: /home/kacperwyrwal/topological-flow-matching
    config_sources:
    - path: hydra.conf
      schema: pkg
      provider: hydra
    - path: /home/kacperwyrwal/topological-flow-matching/configs
      schema: file
      provider: main
    - path: ''
      schema: structured
      provider: schema
    output_dir: ???
    choices:
      experiments: brain/topo_resnet_test
      validation: default
      train/time_sampler: discrete
      train/early_stopping: default
      train/objective: default
      train/coupling: ot
      train/ema: default
      train/optimizer: adamw
      train: default
      time_sampler: discrete
      test: default
      sde_solver: euler_maruyama
      sde: topological_heat_bm
      run: default
      plot/predictions: default
      plot/history: default
      plot: default
      ot: default
      model: residual_nn
      hydra: default
      frame: spectral
      data: brain
      hydra/env: default
      hydra/callbacks: null
      hydra/job_logging: default
      hydra/hydra_logging: default
      hydra/hydra_help: default
      hydra/help: default
      hydra/sweeper: basic
      hydra/launcher: basic
      hydra/output: default
  verbose: false
data:
  name: brain
  task: empirical_to_empirical
  test_size: 0.2
  dir: datasets/brain
frame:
  name: spectral
model:
  name: residual_nn
  hidden_dim: 256
  time_embed_dim: 128
  num_res_block: 1
ot:
  normalize_variance: false
plot:
  output_dir: ${hydra:runtime.output_dir}/plots
  history:
    enabled: true
    dir: ${plot.output_dir}
    name: history
    log_to_wandb: true
  predictions:
    enabled: false
    dir: ${plot.output_dir}
    name: predictions
    log_to_wandb: true
    num_samples: 1000
run:
  seed: 0
  device: cpu
  dtype: float64
  use_wandb: true
  mode: test
  wandb:
    project: topological-flow-matching
    run_name: null
    notes: null
    job_type: test
    tags:
    - brain
    - topological
    - ot
    - test
    - ${run.seed}
    entity: shil6408-university-of-oxford
sde:
  name: topological_heat_bm
  c: 2.0
  sigma: 0.0
sde_solver:
  name: euler_maruyama
  time_steps:
    name: uniform
    num_steps: 1000
    t0: 0.0001
test:
  ratio: 0.2
  batch_size: null
  epoch_size: null
time_sampler:
  name: discrete
  num_steps: 1000
train:
  num_epochs: 1
  batch_size: 512
  epoch_size: 25600
  optimizer:
    name: adamw
    lr: 0.0001
  ema:
    decay: 0.99
  coupling:
    name: ot
  objective:
    name: mse
  early_stopping:
    enabled: true
    patience: 10
    metric_name: W2
    min_delta: 0.05
    mode: min
  time_sampler:
    name: discrete
    num_steps: 1000
    t0: 0.0001
validation:
  ratio: 0.1
  batch_size: null
  epoch_size: null
